Index: src/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Manifest-Version: 1.0\nMain-Class: it.dani.selfhome.Main\nClass-Path: annotations-19.0.0.jar gson-2.8.6.jar antlr-4.9.3-complete.j\n ar\n\n
===================================================================
diff --git a/src/META-INF/MANIFEST.MF b/src/META-INF/MANIFEST.MF
--- a/src/META-INF/MANIFEST.MF	
+++ b/src/META-INF/MANIFEST.MF	
@@ -1,5 +1,5 @@
 Manifest-Version: 1.0
 Main-Class: it.dani.selfhome.Main
 Class-Path: annotations-19.0.0.jar gson-2.8.6.jar antlr-4.9.3-complete.j
- ar
+ ar commons-io-2.11.0.jar
 
Index: out/production/Middle/META-INF/MANIFEST.MF
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>Manifest-Version: 1.0\nMain-Class: it.dani.selfhome.Main\nClass-Path: annotations-19.0.0.jar gson-2.8.6.jar antlr-4.9.3-complete.j\n ar\n\n
===================================================================
diff --git a/out/production/Middle/META-INF/MANIFEST.MF b/out/production/Middle/META-INF/MANIFEST.MF
--- a/out/production/Middle/META-INF/MANIFEST.MF	
+++ b/out/production/Middle/META-INF/MANIFEST.MF	
@@ -1,5 +1,5 @@
 Manifest-Version: 1.0
 Main-Class: it.dani.selfhome.Main
 Class-Path: annotations-19.0.0.jar gson-2.8.6.jar antlr-4.9.3-complete.j
- ar
+ ar commons-io-2.11.0.jar
 
Index: src/it/dani/selfhome/listener/SocketListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package it.dani.selfhome.listener;\n\nimport it.dani.selfhome.icontroller.IController;\nimport it.dani.selfhome.listener.parser.DFLiteBaseVisitor;\nimport it.dani.selfhome.listener.parser.DFLiteLexer;\nimport it.dani.selfhome.listener.parser.DFLiteParser;\nimport org.antlr.v4.runtime.CharStream;\nimport org.antlr.v4.runtime.CharStreams;\nimport org.antlr.v4.runtime.CommonTokenStream;\nimport org.antlr.v4.runtime.tree.ParseTree;\nimport org.jetbrains.annotations.NotNull;\n\nimport java.io.*;\nimport java.net.*;\nimport java.util.*;\n\npublic class SocketListener extends Thread {\n\n    private final int listenPort;\n    private final IController controller;\n    private final it.dani.selfhome.automation.icontroller.IController autoController;\n\n    public SocketListener(int listenPort, @NotNull IController controller, @NotNull it.dani.selfhome.automation.icontroller.IController autoController)\n    {\n        this.listenPort = listenPort;\n        this.controller = controller;\n        this.autoController = autoController;\n    }\n\n    @Override\n    public void run()\n    {\n        try(DatagramSocket sock = new DatagramSocket(this.listenPort))\n        {\n            sock.setReuseAddress(true);\n\n            while(true)\n            {\n                try\n                {\n                    byte[] buffer = new byte[2048];\n                    DatagramPacket pack = new DatagramPacket(buffer, buffer.length);\n                    Arrays.fill(buffer,(byte)0);\n                    pack.setData(buffer);\n                    sock.receive(pack);\n\n                    Runnable handler = () -> {\n                        try {\n                            byte[] receved = Arrays.copyOf(pack.getData(), pack.getLength());\n\n                            DataInputStream dis = new DataInputStream(new ByteArrayInputStream(receved));\n                            String response = this.handleRequest(dis);\n                            dis.close();\n\n                            ByteArrayOutputStream baos = new ByteArrayOutputStream(128);\n                            PrintWriter pw = new PrintWriter(baos);\n                            pw.print(response + \"\\0\");\n                            pw.flush();\n                            pack.setData(baos.toByteArray());\n                            pw.close();\n                            sock.send(pack);\n                        } catch (IOException e) {\n                            e.printStackTrace();\n                        }\n                    };\n\n                    Thread handlerThread = new Thread(handler);\n                    handlerThread.start();\n\n                } catch (IOException e) {\n                    e.printStackTrace();\n                }\n            }\n\n        } catch (SocketException e) {\n            e.printStackTrace();\n        }\n    }\n\n    private String handleRequest(InputStream in) throws IOException {\n        Optional<Object> result;\n\n        try {\n            CharStream charStream = CharStreams.fromStream(in);\n            DFLiteLexer lexer = new DFLiteLexer(charStream);\n            CommonTokenStream tokenStream = new CommonTokenStream(lexer);\n            DFLiteParser parser = new DFLiteParser(tokenStream);\n            ParseTree tree = parser.program();\n            DFLiteBaseVisitor visitor = new DFLiteBaseVisitor(this.controller);\n            result = visitor.visit(tree);\n        } catch (IOException e) {\n            result = Optional.empty();\n        }\n\n        return (result.isPresent())? result.get().toString():\"ERR\";\n    }\n}\n
===================================================================
diff --git a/src/it/dani/selfhome/listener/SocketListener.java b/src/it/dani/selfhome/listener/SocketListener.java
--- a/src/it/dani/selfhome/listener/SocketListener.java	
+++ b/src/it/dani/selfhome/listener/SocketListener.java	
@@ -12,6 +12,7 @@
 
 import java.io.*;
 import java.net.*;
+import java.nio.charset.StandardCharsets;
 import java.util.*;
 
 public class SocketListener extends Thread {
@@ -81,7 +82,14 @@
         Optional<Object> result;
 
         try {
-            CharStream charStream = CharStreams.fromStream(in);
+            BufferedReader br = new BufferedReader(new InputStreamReader(in));
+            String inLine = br.readLine();
+
+            ByteArrayInputStream bais = new ByteArrayInputStream(inLine.getBytes(StandardCharsets.UTF_8));
+            System.out.println(inLine);
+
+
+            CharStream charStream = CharStreams.fromStream(bais);
             DFLiteLexer lexer = new DFLiteLexer(charStream);
             CommonTokenStream tokenStream = new CommonTokenStream(lexer);
             DFLiteParser parser = new DFLiteParser(tokenStream);
